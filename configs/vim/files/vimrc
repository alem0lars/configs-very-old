set nocompatible
set encoding=utf-8

" { Bundles

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Load Vundle (required).
Plugin 'gmarik/Vundle.vim'

" Utility functions for vim (required by `checksyntax_vim`).
Plugin 'tomtom/tlib_vim'

" Comment plugin that also handles embedded filetypes.
Plugin 'tomtom/tcomment_vim'

" Check a file's syntax when saving a file.
Plugin 'tomtom/checksyntax_vim'

" Mark quickfix & location list items with signs.
Plugin 'tomtom/quickfixsigns_vim'

" Finder for files, buffers, mru, etc.
Plugin 'kien/ctrlp.vim'

" Adds to ctrlp the following extensions:
" * cmdline history.
" * yank history.
" * selector menu.
Plugin 'sgur/ctrlp-extensions.vim'

" Git support.
Plugin 'tpope/vim-fugitive'

" Buffer explorer (as a top-bar).
Plugin 'fholgado/minibufexpl.vim'

" Tree-view files browser.
Plugin 'scrooloose/nerdtree'

" Autocompletion using <tab>.
Plugin 'ervandew/supertab'

" Handle parenthesis balancing.
Plugin 'tpope/vim-surround'

" The colorscheme.
Plugin 'alem0lars/vim-colorscheme-darcula'

" Tags buffer.
Plugin 'majutsushi/tagbar'

" Highlighting all possible choices and allowing you to press one key to jump
" directly to the target.
Plugin 'Lokaltog/vim-easymotion'

" Dash integration.
Plugin 'rizzatti/dash.vim'

call vundle#end()
filetype plugin indent on

" }

" ==> VIM CONFIG

" { Syntax & indenting & encoding

filetype plugin indent on
syntax on
scriptencoding utf-8
set viewoptions=folds,options,cursor,unix,slash
set foldenable

" }

" { Formatting

set nowrap
set autoindent
set shiftwidth=2
set expandtab
set tabstop=2
set softtabstop=2
set pastetoggle=<F12>

" }

" { UI

set t_Co=256
colorscheme darcula
set showmode
set ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
set number
set showmatch
set showcmd
set winminheight=0
set wildmenu
set wildmode=list:longest,full
set ul=128
:hi CursorLine cterm=NONE ctermbg=234 ctermfg=NONE guibg=234 guifg=NONE
:hi CursorColumn cterm=NONE ctermbg=234 ctermfg=NONE guibg=234 guifg=NONE
set cursorline!
:nnoremap <Leader>c :set cursorcolumn!<CR>
:nnoremap <Leader>l :set cursorline!<CR>
:nnoremap <Leader>cl :set cursorline! cursorcolumn!<CR>

" Set to auto read when a file is changed from the outside
set autoread
" Always show the statusline
set laststatus=2
set statusline=%<%f
set statusline+=%w%h%m%r
set statusline+=%{fugitive#statusline()}
set statusline+=\ [%{&ff}/%Y]
set statusline+=\ [%{getcwd()}]
set statusline+=%=%-14.(%l,%c%V%)\ %p%%

set list listchars=trail:·,precedes:«,extends:»,tab:▸\ 
set list

" GUI options
set guioptions-=T
set guifont=Inconsolata\ 10

" }

" { Search & replace

set incsearch
set hlsearch
set ignorecase
set smartcase
set gdefault

" }

" { Spellchecking

set nospell

" }

" { Backup & History & Saving

set history=512
set backup
set backupdir=$HOME/.vimbackup
set directory=$HOME/.vimswap
set viewdir=$HOME/.vimviews
set undodir=$HOME/.vimundo
au BufWinLeave * silent! mkview
au BufWinEnter * silent! loadview
silent execute '!mkdir -p ~/.vimbackup'
silent execute '!mkdir -p ~/.vimswap'
silent execute '!mkdir -p ~/.vimviews'
silent execute '!mkdir -p ~/.vimundo'

" }

" { Interface

set mouse=a
set ttymouse=xterm2

" }

" { Keybindings

nnoremap Y y$

nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>

nmap <silent> <leader>/ :nohlsearch<CR>

map <right> :bn<cr>
map <left> :bp<cr>

" Fix keycodes
map ^[[1~ <Home>
map ^[[4~ <End>
imap ^[[1~ <Home>
imap ^[[4~ <End>

" Tagbar

nmap <C-c>t :TagbarToggle<CR>
map <C-c>c :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" Cscope
cnoreabbrev <expr> csa ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs add'  : 'csa')
cnoreabbrev <expr> csf ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs find' : 'csf')
cnoreabbrev <expr> csk ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs kill' : 'csk')
cnoreabbrev <expr> csr ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs reset' : 'csr')
cnoreabbrev <expr> css ((getcmdtype() == ':' && getcmdpos() <= 5)? 'cs show' : 'css')
cnoreabbrev <expr> csh ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs help' : 'csh')

" Search with results in the current window:
" - CTRL-\ followed by one of the cscope search types above (s,g,c,t,e,f,i,d).
" - CTRL-T go back to where you were before the search.
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

" Search with results in a new window split horizontally:
" - CTRL-spacebar followed by one of the cscope search types above (s,g,c,t,e,f,i,d).
nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :scs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

" Search with results in a new window split vertically twice:
" - CTRL-spacebar followed by one of the cscope search types above (s,g,c,t,e,f,i,d).
nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@><C-@>i :vert scs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

" }

" { Shortcuts

cmap cd. lcd %:p:h
cmap w!! w !sudo tee % >/dev/null

" Tabs
map <leader>tn :tabnew<CR>
map <leader>te :tabedit
map <leader>tc :tabclose<CR>
map <leader>tm :tabmove
map <leader>tl :tabs<CR>

" Nerdtree
map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
map <leader>e :NERDTreeFind<CR>
nmap <leader>nt :NERDTreeFind<CR>

" }

" { Misc

set backspace=indent,eol,start

" Tags
set tags=./tags;/

" CScope
if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  command -nargs=0 Cscope cs add ~/.vim/cscope.out ~/.vim
endif

" CtrlP
let g:ctrlp_extensions = ['cmdline', 'yankring', 'menu']

" NerdTree
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.pyc', '\.bak', '\.bkp', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\.class\']
let NERDTreeChDirMode=1
let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1

" miniBufExpl
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" }
